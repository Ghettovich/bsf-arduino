#include "Arduino.h"

#include "MACAddress.h"
#include "IPv6Address.h"
#suite IPv6Address

const uint8_t zero[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#test new_IPv6Address
IPv6Address addr;
ck_assert_mem_eq(zero, addr, 16);


#test setZero
uint8_t expect[16] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
IPv6Address *addr = (IPv6Address *)expect;
addr->setZero();
ck_assert_mem_eq(zero, addr, 16);


#test isZero_true
const IPv6Address *addr = (const IPv6Address *)zero;
ck_assert(addr->isZero() == true);


#test isZero_false
uint8_t expect[16] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
IPv6Address *addr = (IPv6Address *)expect;
ck_assert(addr->isZero() == false);


#test fromString_home
uint8_t expect[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
IPv6Address addr;
boolean result = addr.fromString("::1");
ck_assert(result == true);
ck_assert_mem_eq(expect, addr, 16);


#test fromString_zero
IPv6Address addr;
boolean result = addr.fromString("::");
ck_assert(result == true);
ck_assert(addr.isZero() == true);


#test fromString_googlePublicDNS
uint8_t expect[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr;
boolean result = addr.fromString("2001:4860:4860::8888");
ck_assert(result == true);
ck_assert_mem_eq(expect, addr, 16);


#test fromString_googlePublicDNS_expanded
uint8_t expect[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr;
boolean result = addr.fromString("2001:4860:4860:0000:0000:0000:0000:8888");
ck_assert(result == true);
ck_assert_mem_eq(expect, addr, 16);


#test fromString_invalid
IPv6Address addr;
boolean result = addr.fromString("2001*4860*4860*0000*0000*0000*0000*8888");
ck_assert(result == false);


#test fromString_flash
uint8_t expect[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr;
boolean result = addr.fromString(F("2001:4860:4860::8888"));
ck_assert(result == true);
ck_assert_mem_eq(expect, addr, 16);


#test new_string_googlePublicDNS
uint8_t expect[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr("2001:4860:4860:0000:0000:0000:0000:8888");
ck_assert_mem_eq(expect, addr, 16);


#test new_flash_string_googlePublicDNS
uint8_t expect[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr(F("2001:4860:4860:0000:0000:0000:0000:8888"));
ck_assert_mem_eq(expect, addr, 16);


#test setLinkLocal
uint8_t expect[16] = {
    0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x23, 0x45, 0xff, 0xfe, 0x67, 0x89, 0x10
};
MACAddress macAddress("01:23:45:67:89:10");
IPv6Address addr;
addr.setLinkLocalPrefix();
addr.setEui64(macAddress);
ck_assert_mem_eq(expect, addr, 16);


#test isLinkLocal
IPv6Address addr("fe80::0323:45ff:fe67:8910");
ck_assert(addr.isLinkLocal() == true);


#test isLinkLocal_global
IPv6Address addr("2001:4860:4860::8888");
ck_assert(addr.isLinkLocal() == false);


#test inSameSubnet
IPv6Address addr1("2001:4860:4860::8888");
IPv6Address addr2("2001:4860:4860::4444");
ck_assert(addr1.inSameSubnet(addr2) == true);


#test inSameSubnet_false
IPv6Address addr1("2001:4860:4860:0::8888");
IPv6Address addr2("2001:4860:4860:1::8888");
ck_assert(addr1.inSameSubnet(addr2) == false);


#test inSameSubnet_linkLocal
IPv6Address addr1("fe80::0323:45ff:fe67:8910");
IPv6Address addr2("fe80::d1c5:a0a3:746b:5f9a");
ck_assert(addr1.inSameSubnet(addr2) == true);


#test setLinkLocalAllNodes
uint8_t expect[16] = {
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
IPv6Address addr;
addr.setLinkLocalAllNodes();
ck_assert_mem_eq(expect, addr, 16);


#test isLinkLocalAllNodes_true
IPv6Address addr;
addr.setLinkLocalAllNodes();
ck_assert(addr.isLinkLocalAllNodes() == true);


#test isLinkLocalAllNodes_false
IPv6Address addr;
ck_assert(addr.isLinkLocalAllNodes() == false);


#test setLinkLocalAllRouters
uint8_t expect[16] = {
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02
};
IPv6Address addr;
addr.setLinkLocalAllRouters();
ck_assert_mem_eq(expect, addr, 16);


#test isLinkLocalAllRouters_true
IPv6Address addr;
addr.setLinkLocalAllRouters();
ck_assert(addr.isLinkLocalAllRouters() == true);


#test isLinkLocalAllRouters_false
IPv6Address addr;
ck_assert(addr.isLinkLocalAllRouters() == false);


#test isMulticast
IPv6Address addr("ff02::1");
ck_assert(addr.isMulticast() == true);


#test isMulticast_global
IPv6Address addr("2001:4860:4860::8888");
ck_assert(addr.isMulticast() == false);


#test setSolicitedNodeMulticastAddress
uint8_t expect[16] = {
    0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x88, 0x88
};
IPv6Address globalAddr("2001:4860:4860::8888");
IPv6Address addr;
addr.setSolicitedNodeMulticastAddress(globalAddr);
ck_assert_mem_eq(expect, addr, 16);


#test isSolicitedNodeMulticastAddress_true
IPv6Address globalAddr("2001:4860:4860::8888");
IPv6Address addr;
addr.setSolicitedNodeMulticastAddress(globalAddr);
ck_assert(addr.isSolicitedNodeMulticastAddress(globalAddr) == true);


#test isSolicitedNodeMulticastAddress_false
IPv6Address globalAddr("2001:4860:4860::8888");
IPv6Address addr;
ck_assert(addr.isSolicitedNodeMulticastAddress(globalAddr) == false);


#test equal
uint8_t addrBuf[16] = {
    0x20, 0x01, 0x48, 0x60, 0x48, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88
};
IPv6Address addr("2001:4860:4860::8888");
IPv6Address *addr2 = (IPv6Address*)addrBuf;
ck_assert(addr == *addr2);


#test not_not_equal
IPv6Address addr("2001:4860:4860::8888");
IPv6Address addr2("2001:4860:4860::8888");
ck_assert((addr != addr2) == false);


#test not_equal_zero
IPv6Address addr("2001:4860:4860::8888");
IPv6Address zeroAddr;
ck_assert(addr != zeroAddr);


#test type_global
IPv6Address addr("2001:4860:4860::8888");
ck_assert_int_eq(addr.type(), ADDRESS_TYPE_GLOBAL);


#test type_linkLocal
IPv6Address addr("fe80::0323:45ff:fe67:8910");
ck_assert_int_eq(addr.type(), ADDRESS_TYPE_LINK_LOCAL);


#test type_multicast
IPv6Address addr("ff02::2");
ck_assert_int_eq(addr.type(), ADDRESS_TYPE_MULTICAST);


#test print
Buffer buffer;
IPv6Address addr("2001:4860:4860::8888");
addr.print(buffer);
ck_assert_str_eq(buffer, "2001:4860:4860:0000:0000:0000:0000:8888");

#test print_single_digit
Buffer buffer;
IPv6Address addr("ff02::2");
addr.print(buffer);
ck_assert_str_eq(buffer, "ff02:0000:0000:0000:0000:0000:0000:0002");

#test println
Buffer buffer;
IPv6Address addr("2001:8b0:ffd5:3:f4cc:c669:d333:14cf");
addr.println(buffer);
ck_assert_str_eq(buffer, "2001:08b0:ffd5:0003:f4cc:c669:d333:14cf\r\n");

