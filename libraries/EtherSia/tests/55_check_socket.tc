#include "EtherSia.h"
#include "util.h"
#include "hext.hh"
#suite Socket

class DummySocket : public Socket {

public:
    DummySocket(EtherSia &ether) : Socket(ether) {};
    DummySocket(EtherSia &ether, uint16_t localPort) : Socket(ether, localPort) {};

    uint8_t* payload() {
        return (uint8_t *)(_ether.packet().payload());
    }

    uint16_t payloadLength() {
        return _ether.packet().payloadLength();
    }

protected:
    void sendInternal(uint16_t length, boolean /*isReply*/) {
        IPv6Packet& packet = _ether.packet();
        packet.setProtocol(0xEE);
        packet.setPayloadLength(length);

        _ether.send();
    };
};

#test construct_socket
EtherSia_Dummy ether;
DummySocket sock(ether);
ck_assert_int_eq(sock.localPort(), 0);
ck_assert_int_eq(sock.remotePort(), 0);
ck_assert(sock.remoteAddress().isZero());


#test construct_socket_with_local
EtherSia_Dummy ether;
DummySocket sock(ether, 1234);
ck_assert_int_eq(sock.localPort(), 1234);
ck_assert_int_eq(sock.remotePort(), 0);
ck_assert(sock.remoteAddress().isZero());


#test setRemoteAddress_ip
EtherSia_Dummy ether;
DummySocket sock(ether);
ck_assert(sock.setRemoteAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9", 1234) == true);
ck_assert_int_eq(sock.remotePort(), 1234);
IPv6Address expect("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ck_assert(sock.remoteAddress() == expect);

// setRemoteAddress() should also assign a local port number
ck_assert_int_gt(sock.localPort(), 20000);
ck_assert_int_lt(sock.localPort(), 30000);


#test setRemoteAddress_flash_ip
EtherSia_Dummy ether;
DummySocket sock(ether);
ck_assert(sock.setRemoteAddress(F("2001:08b0:ffd5:0003:0204:a3ff:fe2c:f1a5"), 1234) == true);
ck_assert_int_eq(sock.remotePort(), 1234);
IPv6Address expect("2001:08b0:ffd5:0003:0204:a3ff:fe2c:f1a5");
ck_assert(sock.remoteAddress() == expect);

// setRemoteAddress() should also assign a local port number
ck_assert_int_gt(sock.localPort(), 20000);
ck_assert_int_lt(sock.localPort(), 30000);


#test setRemoteAddress_hostname
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile dnsResponsePacket("packets/udp_dns_response.hext");
ether.injectRecievedPacket(dnsResponsePacket.buffer, dnsResponsePacket.length);

DummySocket sock(ether);
ck_assert(sock.setRemoteAddress("ipv6.aelius.com", 4321) == true);
ck_assert_int_eq(sock.remotePort(), 4321);
IPv6Address expect("2001:41c8:0051:07cf:0000:0000:0000:0006");
ck_assert(sock.remoteAddress() == expect);
ether.end();


#test setRemoteAddress_invalid_ip
EtherSia_Dummy ether;
DummySocket sock(ether);
ck_assert(sock.setRemoteAddress("f00:bar", 1234) == false);


#test send_buffer
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

DummySocket socket(ether);
socket.setRemoteAddress("2001:4321::1234", 1234);
uint8_t buffer[] = {
    'H', 'e', 'l', 'l', 'o', ' ',
    ' ', 'W', 'o', 'r', 'l', 'd', '\r', '\n'
};
socket.send(buffer, sizeof(buffer));

HextFile expect("packets/dummy_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);


#test send_string
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

DummySocket socket(ether);
socket.setRemoteAddress("2001:4321::1234", 1234);
socket.send("Hello  World\r\n");

HextFile expect("packets/dummy_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);


#test print_and_send
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

DummySocket socket(ether);
socket.setRemoteAddress("2001:4321::1234", 1234);
socket.print("Hello ");
socket.println(" World");
socket.send();

HextFile expect("packets/dummy_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
