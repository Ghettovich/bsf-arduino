#include "Arduino.h"
#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

#include <string.h>

class CustomTFTPServer: public TFTPServer {

public:
    uint8_t bytesWritten[1024];
    uint16_t lengthWritten;

    CustomTFTPServer(EtherSia &ether) : TFTPServer(ether) {
        memset(bytesWritten, 0, sizeof(bytesWritten));
        lengthWritten = 0;
    };

    int8_t openFile(const char* filename)
    {
        if (strcmp(filename, "hello.txt") == 0) {
            return 1;
        } else {
            // Not Found
            return -1;
        }
    }

    void writeBytes(int8_t fileno, uint16_t block, const uint8_t* data, uint16_t len)
    {
        if (fileno == 1 && block == 1) {
            // Copy to a buffer for inspection
            memcpy(bytesWritten, data, len);
            lengthWritten = len;
        }
    }

    int16_t readBytes(int8_t fileno, uint16_t block, uint8_t* data)
    {
        if (fileno == 1 && block == 1) {
            // hello.txt
            return sprintf((char *)data, "Hello World\n");
        } else {
            // No more data to be read
            return 0;
        }
    }

};


#suite TFTP Server

#test construct_defaults
EtherSia_Dummy ether;
CustomTFTPServer tftp(ether);
ck_assert_int_eq(tftp.localPort(), 69);

#test invalid_operation
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile tftp_invalid_op("packets/udp_tftp_invalid_op.hext");
ether.injectRecievedPacket(tftp_invalid_op.buffer, tftp_invalid_op.length);
ck_assert_int_eq(ether.receivePacket(), tftp_invalid_op.length);
ck_assert(tftp.handleRequest() == true);

HextFile expect("packets/udp_tftp_reply_invalid_op.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test read_request
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile hello_txt("packets/udp_tftp_read_hello_txt.hext");
ether.injectRecievedPacket(hello_txt.buffer, hello_txt.length);
HextFile icmpNA("packets/icmp6_neighbour_advertisement_global3.hext");
ether.injectRecievedPacket(icmpNA.buffer, icmpNA.length);
HextFile ack_read("packets/udp_tftp_ack_read.hext");
ether.injectRecievedPacket(ack_read.buffer, ack_read.length);

ck_assert_int_eq(ether.receivePacket(), hello_txt.length);
ck_assert(tftp.handleRequest() == true);

HextFile expect("packets/udp_tftp_reply_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test write_request
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile hello_txt("packets/udp_tftp_write_hello_txt.hext");
ether.injectRecievedPacket(hello_txt.buffer, hello_txt.length);
HextFile icmpNA("packets/icmp6_neighbour_advertisement_global3.hext");
ether.injectRecievedPacket(icmpNA.buffer, icmpNA.length);
HextFile ack_read("packets/udp_tftp_write_hello_world.hext");
ether.injectRecievedPacket(ack_read.buffer, ack_read.length);

ck_assert_int_eq(ether.receivePacket(), hello_txt.length);
ck_assert(tftp.handleRequest() == true);

HextFile expect("packets/udp_tftp_reply_ack.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);

ck_assert_int_eq(tftp.lengthWritten, 12);
ck_assert_mem_eq(tftp.bytesWritten, "Hello World\n", tftp.lengthWritten);
ether.end();


#test file_not_found
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile tftp_read_foobar("packets/udp_tftp_read_foobar.hext");
ether.injectRecievedPacket(tftp_read_foobar.buffer, tftp_read_foobar.length);
ck_assert_int_eq(ether.receivePacket(), tftp_read_foobar.length);
ck_assert(tftp.handleRequest() == true);

HextFile expect("packets/udp_tftp_reply_not_found.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test packet_not_for_us
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

CustomTFTPServer tftp(ether);
HextFile not_tftp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(not_tftp.buffer, not_tftp.length);
ck_assert_int_eq(ether.receivePacket(), not_tftp.length);
ck_assert(tftp.handleRequest() == false);

