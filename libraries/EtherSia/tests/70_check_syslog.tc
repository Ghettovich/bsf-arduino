#include "Arduino.h"
#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

#suite Syslog

#test construct_defaults
EtherSia_Dummy ether;
Syslog syslog(ether);
ck_assert_int_eq(syslog.priority(), LOG_INFO);
ck_assert_int_eq(syslog.facility(), LOG_LOCAL0);


#test setPriority
EtherSia_Dummy ether;
Syslog syslog(ether);
syslog.setPriority(LOG_CRIT);
ck_assert_int_eq(syslog.priority(), LOG_CRIT);
ck_assert_int_eq(syslog.facility(), LOG_LOCAL0);


#test setFacility
EtherSia_Dummy ether;
Syslog syslog(ether);
syslog.setFacility(LOG_DAEMON);
ck_assert_int_eq(syslog.priority(), LOG_INFO);
ck_assert_int_eq(syslog.facility(), LOG_DAEMON);


#test println
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

Syslog syslog(ether);
syslog.setRemoteAddress("2001:4321::514");
syslog.print("Hello");
syslog.println(" World");

HextFile expect("packets/udp_syslog_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);


#test println_twice
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

Syslog syslog(ether);
syslog.setRemoteAddress("2001:4321::514");
syslog.println("First Message");

syslog.setPriority(LOG_DEBUG);
syslog.print("The result=0x");
syslog.println(0x45, HEX);
ck_assert_int_eq(ether.getSentCount(), 2);

const int offset = ETHER_HEADER_LEN + IP6_HEADER_LEN + UDP_HEADER_LEN;

frame_t &packet1 = ether.getSent(0);
const char* log_line1 = "<134>EtherSia: First Message";
ck_assert_int_eq(packet1.length - offset, strlen(log_line1)+1);
ck_assert_str_eq((const char*)packet1.packet + offset, log_line1);

frame_t &packet2 = ether.getSent(1);
const char* log_line2 = "<135>EtherSia: The result=0x45";
ck_assert_int_eq(packet2.length - offset, strlen(log_line2)+1);
ck_assert_str_eq((const char*)packet2.packet + offset, log_line2);

ether.end();
