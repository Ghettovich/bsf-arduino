#include "Arduino.h"
#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

#suite HTTP

#test construct_defaults
EtherSia_Dummy ether;
HTTPServer http(ether);
ck_assert_int_eq(http.localPort(), 80);


#test isGet_root
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HTTPServer server(ether);
HextFile http_get("packets/http_get_root.hext");
ether.injectRecievedPacket(http_get.buffer, http_get.length);
ck_assert_int_eq(ether.receivePacket(), 196);
ck_assert(server.havePacket() == true);
ck_assert(server.isPost(F("/")) == false);
ck_assert(server.isGet(F("/")) == true);
ck_assert_int_eq(server.bodyLength(), 0);
ck_assert(server.bodyEquals("foo") == false);


#test isPost
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HTTPServer server(ether);
HextFile http_post("packets/http_post_output1_off.hext");
ether.injectRecievedPacket(http_post.buffer, http_post.length);
ck_assert_int_eq(ether.receivePacket(), 239);
ck_assert(server.havePacket() == true);
ck_assert(server.isGet(F("/")) == false);
ck_assert(server.isPost(F("/")) == false);
ck_assert(server.isPost(F("/output1")) == true);
ck_assert_int_eq(server.bodyLength(), 3);
ck_assert(server.bodyEquals("off") == true);


#test sendReply
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HTTPServer server(ether);
HextFile http_get("packets/http_get_root.hext");
ether.injectRecievedPacket(http_get.buffer, http_get.length);
ck_assert_int_eq(ether.receivePacket(), 196);
ck_assert(server.havePacket() == true);
ck_assert(server.isGet(F("/")) == true);
ck_assert_int_eq(0, ether.getSentCount());

server.printHeaders(server.typePlain);
server.print(F("on"));
server.sendReply();
HextFile expect("packets/http_response_plain_on.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test sendReply_notFound
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HTTPServer server(ether);
HextFile http_get("packets/http_get_root.hext");
ether.injectRecievedPacket(http_get.buffer, http_get.length);
ck_assert_int_eq(ether.receivePacket(), 196);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

server.notFound();
HextFile expect("packets/http_response_not_found.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test sendReply_redirect
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HTTPServer server(ether);
HextFile http_get("packets/http_get_root.hext");
ether.injectRecievedPacket(http_get.buffer, http_get.length);
ck_assert_int_eq(ether.receivePacket(), 196);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

server.redirect(F("/foo/bar"));
HextFile expect("packets/http_response_redirect_foo_bar.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();
