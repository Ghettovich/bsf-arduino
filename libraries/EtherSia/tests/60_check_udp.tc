#include "EtherSia.h"
#include "util.h"
#include "hext.hh"
#suite UDP


#test construct_socket
EtherSia_Dummy ether;
UDPSocket sock(ether);
ck_assert_int_eq(sock.localPort(), 0);
ck_assert_int_eq(sock.remotePort(), 0);
ck_assert(sock.remoteAddress().isZero());

#test construct_socket_with_local
EtherSia_Dummy ether;
UDPSocket sock(ether, 1234);
ck_assert_int_eq(sock.localPort(), 1234);
ck_assert_int_eq(sock.remotePort(), 0);
ck_assert(sock.remoteAddress().isZero());


#test setRemoteAddress_ip
EtherSia_Dummy ether;
UDPSocket sock(ether);
sock.setRemoteAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9", 1234);
ck_assert_int_eq(sock.remotePort(), 1234);
IPv6Address expect("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ck_assert(sock.remoteAddress() == expect);

// setRemoteAddress() should also assign a local port number
ck_assert_int_gt(sock.localPort(), 20000);
ck_assert_int_lt(sock.localPort(), 30000);


#test havePacket_valid
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1008);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == true);

IPv6Address expectSource("2001:08b0:ffd5:0003:a65e:60ff:feda:589d");
ck_assert(sock.packetSource() == expectSource);

IPv6Address expectDest("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ck_assert(sock.packetSource() == expectSource);

ck_assert_int_eq(sock.packetSourcePort(), 64006);
ck_assert_int_eq(sock.packetDestinationPort(), 1008);
ck_assert_int_eq(sock.payloadLength(), 5);
uint8_t expect_payload[] = {'H', 'e', 'l', 'l', 'o'};
ck_assert_mem_eq(sock.payload(), expect_payload, 5);
ck_assert(sock.payloadEquals("Hello") == true);


#test havePacket_with_nd
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile naResponse("packets/icmp6_neighbour_advertisement_global3.hext");
ether.injectRecievedPacket(naResponse.buffer, naResponse.length);

UDPSocket sock(ether, 1008);
sock.setRemoteAddress("2001:08b0:ffd5:0003:a65e:60ff:feda:589d", 64006);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == true);


#test havePacket_wrong_protocol
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1008);
HextFile valid_udp("packets/udp_invalid_hello_wrong_protocol.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == false);


#test havePacket_wrong_desintation_port
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1009);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == false);


#test havePacket_wrong_desintation_address
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bba");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1008);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == false);


#test havePacket_wrong_source_port
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile naResponse("packets/icmp6_neighbour_advertisement_global3.hext");
ether.injectRecievedPacket(naResponse.buffer, naResponse.length);

UDPSocket sock(ether, 1008);
sock.setRemoteAddress("2001:08b0:ffd5:0003:a65e:60ff:feda:589d", 64005);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == false);


#test havePacket_wrong_source_address
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile naResponse("packets/icmp6_neighbour_advertisement_global4.hext");
ether.injectRecievedPacket(naResponse.buffer, naResponse.length);

UDPSocket sock(ether, 1008);
sock.setRemoteAddress("2001:08b0:ffd5:0003:0000:0000:0000:0001", 64006);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(sock.havePacket() == false);


#test send_string
MACAddress routerMac = MACAddress("ca:2f:6d:70:f9:5f");
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.setRouter(routerMac);
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether);
sock.setRemoteAddress("2001:41c8:51:7cf::6", 5004);
sock.send("Oh hi!");

HextFile expect("packets/udp_valid_oh_hi.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test sendReply_string
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1008);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), valid_udp.length);
ck_assert(sock.havePacket() == true);
sock.sendReply("Oh hi!");

HextFile expect("packets/udp_reply_oh_hi.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);

// This should return false now, as packet no-longer contains the packet we received
ck_assert(sock.havePacket() == false);
ether.end();


#test sendReply_print
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

UDPSocket sock(ether, 1008);
HextFile valid_udp("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(valid_udp.buffer, valid_udp.length);
ck_assert_int_eq(ether.receivePacket(), valid_udp.length);
ck_assert(sock.havePacket() == true);
sock.print("Oh hi!");
sock.sendReply();

HextFile expect("packets/udp_reply_oh_hi.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);

// This should return false now, as packet no-longer contains the packet we received
ck_assert(sock.havePacket() == false);
ether.end();

