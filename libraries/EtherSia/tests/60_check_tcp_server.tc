#include "EtherSia.h"
#include "hext.hh"
#include "util.h"

#suite TCPServer

#test construct_server
EtherSia_Dummy ether;
TCPServer server(ether, 80);
ck_assert_int_eq(server.localPort(), 80);


#test have_packet_rst
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_rst("packets/tcp_receive_rst.hext");
ether.injectRecievedPacket(tcp_rst.buffer, tcp_rst.length);
ck_assert_int_eq(ether.receivePacket(), 74);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(0, ether.getSentCount());


#test have_packet_fin
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_fin_ack("packets/tcp_receive_fin_ack.hext");
ether.injectRecievedPacket(tcp_fin_ack.buffer, tcp_fin_ack.length);
ck_assert_int_eq(ether.receivePacket(), 86);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(1, ether.getSentCount());

HextFile expect("packets/tcp_send_fin_ack.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test have_packet_syn
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_syn("packets/tcp_receive_syn.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 98);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(1, ether.getSentCount());

HextFile expect("packets/tcp_send_syn_ack.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test have_packet_ack
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_ack("packets/tcp_receive_ack.hext");
ether.injectRecievedPacket(tcp_ack.buffer, tcp_ack.length);
ck_assert_int_eq(ether.receivePacket(), 86);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(0, ether.getSentCount());


#test have_packet_data
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_syn("packets/tcp_receive_data.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 104);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

const char expect_payload[] = "GET / HTTP/1.0\r\n\r\n";
ck_assert_int_eq(server.payloadLength(), strlen(expect_payload));
ck_assert_mem_eq(server.payload(), expect_payload, strlen(expect_payload));
ck_assert(server.payloadEquals(expect_payload) == true);

IPv6Address expectSource("2001:08b0:ffd5:0003:a65e:60ff:feda:589d");
ck_assert_mem_eq(server.packetSource(), expectSource, 16);

IPv6Address expectDestination("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ck_assert_mem_eq(server.packetDestination(), expectDestination, 16);

ck_assert_int_eq(server.packetSourcePort(), 59545);
ck_assert_int_eq(server.packetDestinationPort(), 80);

ether.end();


#test wrong_port
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 8080);
HextFile tcp_syn("packets/tcp_receive_data.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 104);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(0, ether.getSentCount());


#test wrong_protocol
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile udp_packet("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(udp_packet.buffer, udp_packet.length);
ck_assert_int_eq(ether.receivePacket(), 67);
ck_assert(server.havePacket() == false);
ck_assert_int_eq(0, ether.getSentCount());


#test sendReply_buffer
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_syn("packets/tcp_receive_data.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 104);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

uint8_t buffer[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'};
server.sendReply(buffer, sizeof(buffer));
HextFile expect("packets/tcp_send_data_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test sendReply_string
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_syn("packets/tcp_receive_data.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 104);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

server.sendReply("Hello World");
HextFile expect("packets/tcp_send_data_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test sendReply_print
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

TCPServer server(ether, 80);
HextFile tcp_syn("packets/tcp_receive_data.hext");
ether.injectRecievedPacket(tcp_syn.buffer, tcp_syn.length);
ck_assert_int_eq(ether.receivePacket(), 104);
ck_assert(server.havePacket() == true);
ck_assert_int_eq(0, ether.getSentCount());

server.print("Hello");
server.print(' ');
server.print("World");
server.sendReply();
HextFile expect("packets/tcp_send_data_hello_world.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);

// havePacket() should now return false, because
// the packet buffer contains the sent packet
ck_assert(server.havePacket() == false);
ether.end();

