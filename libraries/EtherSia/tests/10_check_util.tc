#include "util.h"
#suite Util

#test asciiToHex_0
ck_assert(asciiToHex('0') == 0x0);

#test asciiToHex_9
ck_assert(asciiToHex('9') == 0x9);

#test asciiToHex_A
ck_assert(asciiToHex('A') == 0xA);

#test asciiToHex_F
ck_assert(asciiToHex('F') == 0xF);

#test asciiToHex_a
ck_assert(asciiToHex('a') == 0xa);

#test asciiToHex_f
ck_assert(asciiToHex('f') == 0xf);

#test asciiToHex_underscore
ck_assert(asciiToHex('_') == -1);

#test asciiToHex_colon
ck_assert(asciiToHex(':') == -1);


#test containsColon_true
ck_assert(containsColon("2001:4860:4860::8888") == true);

#test containsColon_false
ck_assert(containsColon("www.aelius.com") == false);

#test containsColon_host_port
ck_assert(containsColon("www.aelius.com:80") == true);


#test chksum_hello
const char* hello = "Hello";
uint16_t checksum = ~ chksum(0, (const uint8_t*)hello, strlen(hello));
ck_assert_uint_eq(checksum, 0xDC2D);

#test chksum_simple_accumulative
uint16_t checksum = 0;
const char* hello = "Hello";
const char* world = "World";
checksum = chksum(checksum, (const uint8_t*)hello, strlen(hello));
checksum = ~ chksum(checksum, (const uint8_t*)world, strlen(world));
ck_assert_uint_eq(checksum, 0xAE51);

#test chksum_wikipedia
// Example from: https://en.wikipedia.org/wiki/IPv4_header_checksum
const uint8_t data[] = {
    0x45, 0x00, 0x00, 0x73, 0x00, 0x00, 0x40, 0x00, 0x40, 0x11, // 0xb8, 0x61,
    0xc0, 0xa8, 0x00, 0x01, 0xc0, 0xa8, 0x00, 0xc7,
};
uint16_t checksum = ~ chksum(0, data, sizeof(data));
ck_assert_uint_eq(checksum, 0xB861);


#test print_char
Buffer buffer;
buffer.print('c');
ck_assert_uint_eq(buffer.size(), 1);
ck_assert_str_eq((const char*)buffer, "c");

#test print_string
Buffer buffer;
buffer.print("string");
ck_assert_uint_eq(buffer.size(), 6);
ck_assert_str_eq((const char*)buffer, "string");

#test print_unsigned_int_dec
Buffer buffer;
buffer.print(12U, DEC);
ck_assert_uint_eq(buffer.size(), 2);
ck_assert_str_eq((const char*)buffer, "12");

#test print_int_dec
Buffer buffer;
buffer.print(-18, DEC);
ck_assert_uint_eq(buffer.size(), 3);
ck_assert_str_eq((const char*)buffer, "-18");

#test print_hex
Buffer buffer;
buffer.print(0x16, HEX);
ck_assert_uint_eq(buffer.size(), 2);
ck_assert_str_eq((const char*)buffer, "16");

#test println
Buffer buffer;
buffer.println();
ck_assert_uint_eq(buffer.size(), 2);
ck_assert_str_eq((const char*)buffer, "\r\n");

#test println_string
Buffer buffer;
buffer.println("Hello");
ck_assert_uint_eq(buffer.size(), 7);
ck_assert_str_eq((const char*)buffer, "Hello\r\n");

#test printPaddedHex_05
Buffer buffer;
printPaddedHex(0x05, buffer);
ck_assert_uint_eq(buffer.size(), 2);
ck_assert_str_eq((const char*)buffer, "05");

#test printPaddedHex_ff
Buffer buffer;
printPaddedHex(0xff, buffer);
ck_assert_uint_eq(buffer.size(), 2);
ck_assert_str_eq((const char*)buffer, "ff");

#test printPaddedHex16_5
Buffer buffer;
printPaddedHex16(0x05, buffer);
ck_assert_uint_eq(buffer.size(), 4);
ck_assert_str_eq((const char*)buffer, "0005");

#test printPaddedHex16_ff
Buffer buffer;
printPaddedHex16(0xff, buffer);
ck_assert_uint_eq(buffer.size(), 4);
ck_assert_str_eq((const char*)buffer, "00ff");

#test printPaddedHex16_100
Buffer buffer;
printPaddedHex16(0x100, buffer);
ck_assert_uint_eq(buffer.size(), 4);
ck_assert_str_eq((const char*)buffer, "0100");

#test printPaddedHex16_fe80
Buffer buffer;
printPaddedHex16(0xfe80, buffer);
ck_assert_uint_eq(buffer.size(), 4);
ck_assert_str_eq((const char*)buffer, "fe80");

#test printHexDump_6
const uint8_t data[] = {'H','e','l','l','o','\t'};
Buffer buffer;
printHexDump(data, sizeof(data), buffer);
ck_assert_uint_eq(buffer.size(), 67);
ck_assert_str_eq(
    (const char*)buffer,
    "0000:  48 65 6c 6c 6f 09                                 |Hello.|\r\n"
);

#test printHexDump_16
uint8_t binary[16];
for (unsigned int i=0; i<sizeof(binary); i++) {
    binary[i] = 0x70 + i;
}
Buffer buffer;
printHexDump(binary, sizeof(binary), buffer);
ck_assert_uint_eq(buffer.size(), 77);
ck_assert_str_eq(
    (const char*)buffer,
    "0000:  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  |pqrstuvwxyz{|}~.|\r\n"
);

#test printHexDump_17
uint8_t binary[17];
for (unsigned int i=0; i<sizeof(binary); i++) {
    binary[i] = 0x70 + i;
}
Buffer buffer;
printHexDump(binary, sizeof(binary), buffer);
ck_assert_uint_eq(buffer.size(), 139);
ck_assert_str_eq(
    (const char*)buffer,
    "0000:  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  |pqrstuvwxyz{|}~.|\r\n"
    "0010:  80                                                |.|\r\n"
);

#test printHexDump_25
uint8_t binary[25];
for (unsigned int i=0; i<sizeof(binary); i++) {
    binary[i] = 0x70 + i;
}
Buffer buffer;
printHexDump(binary, sizeof(binary), buffer);
ck_assert_uint_eq(buffer.size(), 147);
ck_assert_str_eq(
    (const char*)buffer,
    "0000:  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  |pqrstuvwxyz{|}~.|\r\n"
    "0010:  80 81 82 83 84 85 86 87  88                       |.........|\r\n"
);

