#include "EtherSia.h"
#include "hext.hh"
#include "util.h"
#suite Core

const char local_mac[] = "ca:2f:6d:70:f9:5f";
IPv6Address ourLinkLocal("fe80::c82f:6dff:fe70:f95f");
IPv6Address googleDns("2001:4860:4860::8888");


#test default_dns_server
EtherSia_Dummy ether;
ether.disableAutoconfiguration();
ether.begin(local_mac);
ck_assert(ether.dnsServerAddress() == googleDns);


#test sets_linklocal_address
EtherSia_Dummy ether;
ether.disableAutoconfiguration();
ether.begin(local_mac);
IPv6Address addr("fe80:0000:0000:0000:c82f:6dff:fe70:f95f");
ck_assert(ether.linkLocalAddress() == addr);


#test isOurAddress
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::5000");
ether.begin(local_mac);

ck_assert_int_eq(ether.isOurAddress(ourLinkLocal), ADDRESS_TYPE_LINK_LOCAL);

IPv6Address expect_global("2001:1234::5000");
ck_assert_int_eq(ether.isOurAddress(expect_global), ADDRESS_TYPE_GLOBAL);

IPv6Address expect_allnodes("ff02::1");
ck_assert_int_eq(ether.isOurAddress(expect_allnodes), ADDRESS_TYPE_MULTICAST);

IPv6Address expect_nodemulticast("ff02::1:ff70:f95f");
ck_assert_int_eq(ether.isOurAddress(expect_nodemulticast), ADDRESS_TYPE_MULTICAST);

IPv6Address expect_globalmulticast("ff02::1:ff00:5000");
ck_assert_int_eq(ether.isOurAddress(expect_globalmulticast), ADDRESS_TYPE_MULTICAST);

ck_assert_int_eq(ether.isOurAddress(googleDns), 0);

IPv6Address other_global("2a02:26f0::c82f:6dff:fe70:f95f");
ck_assert_int_eq(ether.isOurAddress(other_global), 0);


#test inOurSubnet
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::c82f:6dff:fe70:f95f");
ether.begin(local_mac);

IPv6Address expect_linklocal("fe80::d1c5:a0a3:746b:5f9a");
ck_assert_int_eq(ether.inOurSubnet(expect_linklocal), ADDRESS_TYPE_LINK_LOCAL);

IPv6Address expect_global("2001:1234::1");
ck_assert_int_eq(ether.inOurSubnet(expect_global), ADDRESS_TYPE_GLOBAL);

ck_assert_int_eq(ether.inOurSubnet(googleDns), 0);


#test no_packets_available
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

ether.clearRecieved();
ck_assert(ether.receivePacket() == 0);


#test recieve_ipv6_packet
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

HextFile validPacket("packets/udp_valid_oh_hi.hext");
ether.injectRecievedPacket(validPacket.buffer, validPacket.length);
ck_assert_int_eq(ether.receivePacket(), 68);
ck_assert_int_eq(ether.packet().length(), 68);
ck_assert_int_eq(ether.packet().payloadLength(), 14);
ck_assert_int_eq(ether.packet().protocol(), IP6_PROTO_UDP);


#test ignores_ipv4_packet
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

HextFile ipv4packet("packets/ipv4_packet_valid.hext");
ether.injectRecievedPacket(ipv4packet.buffer, ipv4packet.length);
ck_assert(ether.receivePacket() == 0);
ck_assert(ether.bufferContainsReceived() == false);


#test ignores_wrong_ethernet_destination
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin("ca:2f:6d:70:f9:55");

HextFile validPacket("packets/udp_valid_oh_hi.hext");
ether.injectRecievedPacket(validPacket.buffer, validPacket.length);
ck_assert(ether.receivePacket() == 0);
ck_assert(ether.bufferContainsReceived() == false);


#test ignores_wrong_ethernet_source
EtherSia_Dummy ether;
ether.setGlobalAddress("2001::1");
ether.begin(local_mac);

HextFile validPacket("packets/udp_multicast.hext");
ether.injectRecievedPacket(validPacket.buffer, validPacket.length);
ck_assert(ether.receivePacket() == 0);
ck_assert(ether.bufferContainsReceived() == false);


#test setRouter
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:1234::1");
ether.begin(local_mac);
ether.clearSent();

HextFile naResponse("packets/icmp6_neighbour_advertisement_global2.hext");
ether.injectRecievedPacket(naResponse.buffer, naResponse.length);

boolean result = ether.setRouter("2001:1234::5000");
ck_assert(result == true);

MACAddress routerMac = ether.routerMac();
ck_assert_mem_eq(routerMac, "\x01\x02\x03\x04\x05\x06", 6);
ether.end();


#test rejectUDPPacket
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile udpPacket("packets/udp_valid_hello.hext");
ether.injectRecievedPacket(udpPacket.buffer, udpPacket.length);
ck_assert_int_eq(ether.receivePacket(), 67);

ether.rejectPacket();
ck_assert_int_eq(ether.getSentCount(), 1);

// Check the NS packet that was sent looks correct
HextFile expect("packets/icmp6_port_unreachable.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test rejectTCPPacket
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile tcpSynPacket("packets/tcp_receive_syn.hext");
ether.injectRecievedPacket(tcpSynPacket.buffer, tcpSynPacket.length);
ck_assert_int_eq(ether.receivePacket(), 98);

ether.rejectPacket();
ck_assert_int_eq(ether.getSentCount(), 1);

// Check the NS packet that was sent looks correct
HextFile expect("packets/tcp_send_rst.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();


#test rejectIcmpPacket_ignore
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile icmpPacket("packets/icmp6_unknown_type.hext");
ether.injectRecievedPacket(icmpPacket.buffer, icmpPacket.length);
ck_assert_int_eq(ether.receivePacket(), 67);

ether.rejectPacket();
ck_assert_int_eq(ether.getSentCount(), 0);
ether.end();


#test rejectUnknownProtocolPacket
EtherSia_Dummy ether;
ether.setGlobalAddress("2001:08b0:ffd5:0003:0204:a3ff:fe2c:2bb9");
ether.begin("00:04:a3:2c:2b:b9");
ether.clearSent();

HextFile icmpPacket("packets/ipv6_unknown_protocol.hext");
ether.injectRecievedPacket(icmpPacket.buffer, icmpPacket.length);
ck_assert_int_eq(ether.receivePacket(), 67);

ether.rejectPacket();
ck_assert_int_eq(ether.getSentCount(), 1);

// Check the NS packet that was sent looks correct
HextFile expect("packets/icmp6_unrecognized_next_header.hext");
frame_t &sent = ether.getLastSent();
ck_assert_int_eq(sent.length, expect.length);
ck_assert_mem_eq(sent.packet, expect.buffer, expect.length);
ether.end();
